# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "create_savings_plan(string,string,address,uint64,uint64,bool,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "my_savings_plan_info(string)(string,address,bool,bool,uint64,uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "SavingsInfo",
                    "elements": [
                        [
                            "vault_name",
                            "string"
                        ],
                        [
                            "user",
                            "address"
                        ],
                        [
                            "claimed",
                            "bool"
                        ],
                        [
                            "flexible",
                            "bool"
                        ],
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "duration",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "top_up_savings(string,axfer)(string,address,bool,bool,uint64,uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "SavingsInfo",
                    "elements": [
                        [
                            "vault_name",
                            "string"
                        ],
                        [
                            "user",
                            "address"
                        ],
                        [
                            "claimed",
                            "bool"
                        ],
                        [
                            "flexible",
                            "bool"
                        ],
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "duration",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_savings(string,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_fees(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_vault(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "optin_asset(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ZVault",
        "methods": [
            {
                "name": "create_savings_plan",
                "args": [
                    {
                        "type": "string",
                        "name": "vault_id"
                    },
                    {
                        "type": "string",
                        "name": "vault_name"
                    },
                    {
                        "type": "address",
                        "name": "vault_keeper"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    },
                    {
                        "type": "uint64",
                        "name": "duration"
                    },
                    {
                        "type": "bool",
                        "name": "flexible"
                    },
                    {
                        "type": "axfer",
                        "name": "asset_xfer"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "This method is used to create a new savings plan"
            },
            {
                "name": "my_savings_plan_info",
                "args": [
                    {
                        "type": "string",
                        "name": "vault_id"
                    }
                ],
                "returns": {
                    "type": "(string,address,bool,bool,uint64,uint64,uint64)"
                },
                "desc": "This method is used to retreive a savings plans details"
            },
            {
                "name": "top_up_savings",
                "args": [
                    {
                        "type": "string",
                        "name": "vault_id"
                    },
                    {
                        "type": "axfer",
                        "name": "asset_xfer"
                    }
                ],
                "returns": {
                    "type": "(string,address,bool,bool,uint64,uint64,uint64)"
                },
                "desc": "This is used to increase the amount of token that has already been locked/saved"
            },
            {
                "name": "withdraw_savings",
                "args": [
                    {
                        "type": "string",
                        "name": "vault_id"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "This method is used to withdraw all or a particular amount from the savings provided it's the due date"
            },
            {
                "name": "withdraw_fees",
                "args": [
                    {
                        "type": "address",
                        "name": "to_address"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "This method is used to withdraw the algorand fees sent when creating a vault.\nOnly the contract creator can withdraw on the fees.\nNOTE: you ccan only withdraw the fees and nothing else."
            },
            {
                "name": "delete_vault",
                "args": [
                    {
                        "type": "string",
                        "name": "vault_id"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "This method is used to delete a vault from the contract.\nNOTE : Make sure you have withdrawn all your locked assets. Only the vault creator can delete it."
            },
            {
                "name": "optin_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset_id"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "This method is used to add a new asset to the ZVault contract"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE",
        "opt_in": "CALL"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class CreateSavingsPlanArgs(_ArgsBase[None]):
    """This method is used to create a new savings plan"""

    vault_id: str
    vault_name: str
    vault_keeper: str
    asset_id: int
    duration: int
    flexible: bool
    asset_xfer: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "create_savings_plan(string,string,address,uint64,uint64,bool,axfer)void"


@dataclasses.dataclass(kw_only=True)
class SavingsInfo:
    vault_name: str
    user: str
    claimed: bool
    flexible: bool
    amount: int
    asset_id: int
    duration: int


@dataclasses.dataclass(kw_only=True)
class MySavingsPlanInfoArgs(_ArgsBase[SavingsInfo]):
    """This method is used to retreive a savings plans details"""

    vault_id: str

    @staticmethod
    def method() -> str:
        return "my_savings_plan_info(string)(string,address,bool,bool,uint64,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class TopUpSavingsArgs(_ArgsBase[SavingsInfo]):
    """This is used to increase the amount of token that has already been locked/saved"""

    vault_id: str
    asset_xfer: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "top_up_savings(string,axfer)(string,address,bool,bool,uint64,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class WithdrawSavingsArgs(_ArgsBase[bool]):
    """This method is used to withdraw all or a particular amount from the savings provided it's the due date"""

    vault_id: str
    amount: int

    @staticmethod
    def method() -> str:
        return "withdraw_savings(string,uint64)bool"


@dataclasses.dataclass(kw_only=True)
class WithdrawFeesArgs(_ArgsBase[None]):
    """This method is used to withdraw the algorand fees sent when creating a vault.
    Only the contract creator can withdraw on the fees.
    NOTE: you ccan only withdraw the fees and nothing else."""

    to_address: str
    amount: int

    @staticmethod
    def method() -> str:
        return "withdraw_fees(address,uint64)void"


@dataclasses.dataclass(kw_only=True)
class DeleteVaultArgs(_ArgsBase[None]):
    """This method is used to delete a vault from the contract.
    NOTE : Make sure you have withdrawn all your locked assets. Only the vault creator can delete it."""

    vault_id: str

    @staticmethod
    def method() -> str:
        return "delete_vault(string)void"


@dataclasses.dataclass(kw_only=True)
class OptinAssetArgs(_ArgsBase[None]):
    """This method is used to add a new asset to the ZVault contract"""

    asset_id: int

    @staticmethod
    def method() -> str:
        return "optin_asset(asset)void"


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def create_savings_plan(
        self,
        *,
        vault_id: str,
        vault_name: str,
        vault_keeper: str,
        asset_id: int,
        duration: int,
        flexible: bool,
        asset_xfer: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """This method is used to create a new savings plan
        
        Adds a call to `create_savings_plan(string,string,address,uint64,uint64,bool,axfer)void` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param str vault_name: The `vault_name` ABI parameter
        :param str vault_keeper: The `vault_keeper` ABI parameter
        :param int asset_id: The `asset_id` ABI parameter
        :param int duration: The `duration` ABI parameter
        :param bool flexible: The `flexible` ABI parameter
        :param TransactionWithSigner asset_xfer: The `asset_xfer` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateSavingsPlanArgs(
            vault_id=vault_id,
            vault_name=vault_name,
            vault_keeper=vault_keeper,
            asset_id=asset_id,
            duration=duration,
            flexible=flexible,
            asset_xfer=asset_xfer,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def my_savings_plan_info(
        self,
        *,
        vault_id: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """This method is used to retreive a savings plans details
        
        Adds a call to `my_savings_plan_info(string)(string,address,bool,bool,uint64,uint64,uint64)` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = MySavingsPlanInfoArgs(
            vault_id=vault_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def top_up_savings(
        self,
        *,
        vault_id: str,
        asset_xfer: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """This is used to increase the amount of token that has already been locked/saved
        
        Adds a call to `top_up_savings(string,axfer)(string,address,bool,bool,uint64,uint64,uint64)` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param TransactionWithSigner asset_xfer: The `asset_xfer` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = TopUpSavingsArgs(
            vault_id=vault_id,
            asset_xfer=asset_xfer,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_savings(
        self,
        *,
        vault_id: str,
        amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """This method is used to withdraw all or a particular amount from the savings provided it's the due date
        
        Adds a call to `withdraw_savings(string,uint64)bool` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param int amount: The `amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawSavingsArgs(
            vault_id=vault_id,
            amount=amount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_fees(
        self,
        *,
        to_address: str,
        amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """This method is used to withdraw the algorand fees sent when creating a vault.
        Only the contract creator can withdraw on the fees.
        NOTE: you ccan only withdraw the fees and nothing else.
        
        Adds a call to `withdraw_fees(address,uint64)void` ABI method
        
        :param str to_address: The `to_address` ABI parameter
        :param int amount: The `amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawFeesArgs(
            to_address=to_address,
            amount=amount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_vault(
        self,
        *,
        vault_id: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """This method is used to delete a vault from the contract.
        NOTE : Make sure you have withdrawn all your locked assets. Only the vault creator can delete it.
        
        Adds a call to `delete_vault(string)void` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DeleteVaultArgs(
            vault_id=vault_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def optin_asset(
        self,
        *,
        asset_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """This method is used to add a new asset to the ZVault contract
        
        Adds a call to `optin_asset(asset)void` ABI method
        
        :param int asset_id: The `asset_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OptinAssetArgs(
            asset_id=asset_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def opt_in_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the opt_in bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_opt_in(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class ZVaultClient:
    """A class for interacting with the ZVault app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        ZVaultClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def create_savings_plan(
        self,
        *,
        vault_id: str,
        vault_name: str,
        vault_keeper: str,
        asset_id: int,
        duration: int,
        flexible: bool,
        asset_xfer: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """This method is used to create a new savings plan
        
        Calls `create_savings_plan(string,string,address,uint64,uint64,bool,axfer)void` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param str vault_name: The `vault_name` ABI parameter
        :param str vault_keeper: The `vault_keeper` ABI parameter
        :param int asset_id: The `asset_id` ABI parameter
        :param int duration: The `duration` ABI parameter
        :param bool flexible: The `flexible` ABI parameter
        :param TransactionWithSigner asset_xfer: The `asset_xfer` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CreateSavingsPlanArgs(
            vault_id=vault_id,
            vault_name=vault_name,
            vault_keeper=vault_keeper,
            asset_id=asset_id,
            duration=duration,
            flexible=flexible,
            asset_xfer=asset_xfer,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def my_savings_plan_info(
        self,
        *,
        vault_id: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[SavingsInfo]:
        """This method is used to retreive a savings plans details
        
        Calls `my_savings_plan_info(string)(string,address,bool,bool,uint64,uint64,uint64)` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[SavingsInfo]: The result of the transaction"""

        args = MySavingsPlanInfoArgs(
            vault_id=vault_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = SavingsInfo(**result_dict)
        return result

    def top_up_savings(
        self,
        *,
        vault_id: str,
        asset_xfer: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[SavingsInfo]:
        """This is used to increase the amount of token that has already been locked/saved
        
        Calls `top_up_savings(string,axfer)(string,address,bool,bool,uint64,uint64,uint64)` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param TransactionWithSigner asset_xfer: The `asset_xfer` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[SavingsInfo]: The result of the transaction"""

        args = TopUpSavingsArgs(
            vault_id=vault_id,
            asset_xfer=asset_xfer,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = SavingsInfo(**result_dict)
        return result

    def withdraw_savings(
        self,
        *,
        vault_id: str,
        amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[bool]:
        """This method is used to withdraw all or a particular amount from the savings provided it's the due date
        
        Calls `withdraw_savings(string,uint64)bool` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param int amount: The `amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[bool]: The result of the transaction"""

        args = WithdrawSavingsArgs(
            vault_id=vault_id,
            amount=amount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_fees(
        self,
        *,
        to_address: str,
        amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """This method is used to withdraw the algorand fees sent when creating a vault.
        Only the contract creator can withdraw on the fees.
        NOTE: you ccan only withdraw the fees and nothing else.
        
        Calls `withdraw_fees(address,uint64)void` ABI method
        
        :param str to_address: The `to_address` ABI parameter
        :param int amount: The `amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = WithdrawFeesArgs(
            to_address=to_address,
            amount=amount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_vault(
        self,
        *,
        vault_id: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """This method is used to delete a vault from the contract.
        NOTE : Make sure you have withdrawn all your locked assets. Only the vault creator can delete it.
        
        Calls `delete_vault(string)void` ABI method
        
        :param str vault_id: The `vault_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DeleteVaultArgs(
            vault_id=vault_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def optin_asset(
        self,
        *,
        asset_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """This method is used to add a new asset to the ZVault contract
        
        Calls `optin_asset(asset)void` ABI method
        
        :param int asset_id: The `asset_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = OptinAssetArgs(
            asset_id=asset_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def opt_in_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the opt_in bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.opt_in(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
